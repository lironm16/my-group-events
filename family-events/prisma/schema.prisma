datasource db {
  provider = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Family {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique
  members    User[]
  groups     Group[]
  events     Event[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  username  String?  @unique
  image     String?
  role      String   @default("member")
  passwordHash String?
  approved  Boolean  @default(false)
  phone     String?
  phoneVerified Boolean @default(false)
  theme     String?
  notifyRsvpEmails Boolean @default(true)
  defaultLocation  String?
  family    Family?  @relation(fields: [familyId], references: [id])
  familyId  String?
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
  accounts  Account[]
  sessions  Session[]
  rsvps     RSVP[]
  hosted    Event[]  @relation("EventHost")
  coHosted  EventHost[]
  passwordResetTokens PasswordResetToken[]
  activationTokens    ActivationToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        String   @id @default(cuid())
  nickname  String
  family    Family   @relation(fields: [familyId], references: [id])
  familyId  String
  parent    Group?   @relation("GroupToChildren", fields: [parentId], references: [id])
  parentId  String?
  children  Group[]  @relation("GroupToChildren")
  members   User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 String   @id @default(cuid())
  title              String
  description        String?
  location           String?
  startAt            DateTime
  endAt              DateTime?
  externalLink       String?
  isHolidayGenerated Boolean  @default(false)
  holidayKey         String?
  visibleToAll       Boolean  @default(true)
  rsvpOpenToAll      Boolean  @default(false)
  host               User     @relation("EventHost", fields: [hostId], references: [id])
  hostId             String
  family             Family?  @relation(fields: [familyId], references: [id])
  familyId           String?
  rsvps              RSVP[]
  coHosts            EventHost[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model EventHost {
  id       String @id @default(cuid())
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@unique([eventId, userId])
}

model RSVP {
  id        String     @id @default(cuid())
  status    RSVPStatus
  note      String?
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([eventId, userId])
}

enum RSVPStatus {
  APPROVED
  DECLINED
  MAYBE
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ActivationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PhoneVerification {
  id        String   @id @default(cuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

